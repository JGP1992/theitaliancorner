// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// prisma seed uses package.json scripts; no inline config here

/// Core entities for the stocktake system.
model Store {
  id        String   @id @default(cuid())
  name      String
  slug      String   @unique
  apiKey    String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  stocktakes    Stocktake[]
  deliveryPlans DeliveryPlan[]
  inventory     StoreInventory[]
}

model StoreInventory {
  id          String   @id @default(cuid())
  store       Store    @relation(fields: [storeId], references: [id])
  storeId     String
  item        Item     @relation(fields: [itemId], references: [id])
  itemId      String
  targetQuantity Float?
  targetText   String?
  unit         String?
  isActive     Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([storeId, itemId])
}

model Customer {
  id          String   @id @default(cuid())
  name        String
  type        String   @default("restaurant") // restaurant, cafe, hotel, etc.
  address     String?
  phone       String?
  email       String?
  contactName String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  deliveryPlans DeliveryPlanCustomer[]
}

model Category {
  id        String   @id @default(cuid())
  name      String   @unique
  sortOrder Int      @default(0)
  items     Item[]
}

model Item {
  id           String    @id @default(cuid())
  name         String    @unique
  category     Category  @relation(fields: [categoryId], references: [id])
  categoryId   String
  unit         String?
  targetNumber Float?
  targetText   String?
  defaultQuantity Float?
  isActive     Boolean   @default(true)
  sortOrder    Int       @default(0)

  stocktakeItems StocktakeItem[]
  deliveryItems  DeliveryItem[]
  recipeIngredients RecipeIngredient[]
  productionIngredients ProductionIngredient[]
  orderItems OrderItem[]
  storeInventory StoreInventory[]
  packagingOptions ItemPackagingOption[]
  // Back relation for scheduled production tasks
  productionTasks ProductionTask[]
}

model Stocktake {
  id          String          @id @default(cuid())
  store       Store           @relation(fields: [storeId], references: [id])
  storeId     String
  date        DateTime
  photoUrl    String?
  notes       String?
  submittedAt DateTime        @default(now())
  submittedBy User?           @relation("StocktakeSubmittedBy", fields: [submittedByUserId], references: [id])
  submittedByUserId String?
  /// If true, this represents a full master stocktake (typically at the Factory)
  isMaster    Boolean         @default(false)

  items StocktakeItem[]

  @@index([storeId, date])
}

model StocktakeItem {
  id          String    @id @default(cuid())
  stocktake   Stocktake @relation(fields: [stocktakeId], references: [id])
  stocktakeId String
  item        Item      @relation(fields: [itemId], references: [id])
  itemId      String
  quantity    Float?
  note        String?

  @@unique([stocktakeId, itemId])
}

enum DeliveryStatus {
  DRAFT
  CONFIRMED
  SENT
}

// Packaging support for deliveries (cups, tubs, trays with optional variable weight)
enum PackagingType {
  CUP
  TUB
  TRAY
}

enum UnitType {
  ML
  L
  KG
}

model PackagingOption {
  id            String        @id @default(cuid())
  name          String        @unique // Display label, e.g., "125 ml cup", "5 L tub", "2.5 kg tray"
  type          PackagingType
  sizeValue     Float?        // e.g., 125, 2, 5, 2.5 depending on unit
  sizeUnit      UnitType?     // ML, L, KG
  variableWeight Boolean      @default(false) // if true, capture weight per delivery item (e.g., trays)
  // Audience flags: which destinations can use this packaging
  allowStores    Boolean       @default(true)
  allowCustomers Boolean       @default(true)
  isActive      Boolean       @default(true)
  sortOrder     Int           @default(0)

  deliveryItems DeliveryItem[]
  items         ItemPackagingOption[]

  @@index([type, isActive])
}

// Join table: which packaging options are allowed for which items (flavors)
model ItemPackagingOption {
  id                 String          @id @default(cuid())
  item               Item            @relation(fields: [itemId], references: [id])
  itemId             String
  packagingOption    PackagingOption @relation(fields: [packagingOptionId], references: [id])
  packagingOptionId  String
  isDefault          Boolean         @default(false)
  isDefaultForStores Boolean         @default(false)
  isDefaultForCustomers Boolean      @default(false)

  createdAt DateTime @default(now())

  @@unique([itemId, packagingOptionId])
  @@index([itemId])
  @@index([packagingOptionId])
}

model DeliveryPlan {
  id        String         @id @default(cuid())
  store     Store?         @relation(fields: [storeId], references: [id])
  storeId   String?
  date      DateTime
  status    DeliveryStatus @default(DRAFT)
  notes     String?
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt

  items     DeliveryItem[]
  customers DeliveryPlanCustomer[]

  @@index([storeId, date])
}

model DeliveryPlanCustomer {
  id        String       @id @default(cuid())
  plan      DeliveryPlan @relation(fields: [planId], references: [id])
  planId    String
  customer  Customer     @relation(fields: [customerId], references: [id])
  customerId String
  priority  Int          @default(0) // delivery order
  notes     String?

  @@unique([planId, customerId])
}

model DeliveryItem {
  id        String       @id @default(cuid())
  plan      DeliveryPlan @relation(fields: [planId], references: [id])
  planId    String
  item      Item         @relation(fields: [itemId], references: [id])
  itemId    String
  quantity  Float
  note      String?

  // Optional packaging for this delivery line (e.g., 5L tub, 125ml cup, tray)
  packagingOption  PackagingOption? @relation(fields: [packagingOptionId], references: [id])
  packagingOptionId String?
  // If packaging has variable weight (e.g., trays), allow capturing the weight at load time
  weightKg Float?

  @@index([planId])
}

// Recipe system for gelato production
model Recipe {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  category    String   @default("gelato") // gelato, sorbet, etc.
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  ingredients RecipeIngredient[]
  productions Production[]
}

model RecipeIngredient {
  id         String  @id @default(cuid())
  recipe     Recipe  @relation(fields: [recipeId], references: [id])
  recipeId   String
  item       Item    @relation(fields: [itemId], references: [id])
  itemId     String
  quantity   Float   // amount needed per batch
  unit       String  // kg, g, l, ml, etc.
  notes      String?

  @@unique([recipeId, itemId])
}

// Production tracking
model Production {
  id          String   @id @default(cuid())
  recipe      Recipe   @relation(fields: [recipeId], references: [id])
  recipeId    String
  batchSize   Float    // how many liters/kilos produced
  batchUnit   String   @default("kg") // kg, l, etc.
  producedAt  DateTime @default(now())
  notes       String?
  createdAt   DateTime @default(now())

  ingredients ProductionIngredient[]
}

model ProductionIngredient {
  id           String     @id @default(cuid())
  production   Production @relation(fields: [productionId], references: [id])
  productionId String
  item         Item       @relation(fields: [itemId], references: [id])
  itemId       String
  quantityUsed Float      // actual amount used
  unit         String     // kg, g, l, ml, etc.
}

// Scheduled production tasks (what the Factory should make on specific days)
enum ProductionTaskStatus {
  SCHEDULED
  IN_PROGRESS
  DONE
  CANCELLED
}

model ProductionTask {
  id           String                @id @default(cuid())
  date         DateTime              // day the task is scheduled
  item         Item                  @relation(fields: [itemId], references: [id])
  itemId       String
  quantity     Float                 // number of tubs/batches/etc.
  unit         String                @default("units") // e.g., tubs, kg, l
  status       ProductionTaskStatus  @default(SCHEDULED)
  notes        String?

  createdBy    User?                 @relation("TaskCreatedBy", fields: [createdByUserId], references: [id])
  createdByUserId String?
  assignedTo   User?                 @relation("TaskAssignedTo", fields: [assignedToUserId], references: [id])
  assignedToUserId String?

  startedAt    DateTime?
  completedAt  DateTime?
  createdAt    DateTime              @default(now())
  updatedAt    DateTime              @updatedAt

  @@index([date])
  @@index([status, date])
}

// Supplier and ordering system
model Supplier {
  id          String   @id @default(cuid())
  name        String   @unique
  contactName String?
  email       String?
  phone       String?
  address     String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  orders Order[]
}

enum OrderStatus {
  DRAFT
  PENDING
  CONFIRMED
  RECEIVED
  CANCELLED
}

model Order {
  id          String      @id @default(cuid())
  supplier    Supplier?   @relation(fields: [supplierId], references: [id])
  supplierId  String?
  status      OrderStatus @default(DRAFT)
  orderDate   DateTime    @default(now())
  expectedDate DateTime?
  receivedDate DateTime?
  totalAmount Float?
  currency    String      @default("AUD")
  notes       String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  items OrderItem[]
}

model OrderItem {
  id          String  @id @default(cuid())
  order       Order   @relation(fields: [orderId], references: [id])
  orderId     String
  item        Item    @relation(fields: [itemId], references: [id])
  itemId      String
  quantity    Float
  unit        String
  unitPrice   Float?
  totalPrice  Float?
  notes       String?

  @@unique([orderId, itemId])
}

// User authentication and authorization system
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String   // hashed password
  firstName String
  lastName  String
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  roles     UserRole[]
  sessions  Session[]
  submittedStocktakes Stocktake[] @relation("StocktakeSubmittedBy")
  // Back relations for ProductionTask assignments/creation
  productionTasksCreated  ProductionTask[] @relation("TaskCreatedBy")
  productionTasksAssigned ProductionTask[] @relation("TaskAssignedTo")
}

model Role {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  users       UserRole[]
  permissions RolePermission[]
}

model Permission {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  resource    String   // e.g., 'stores', 'orders', 'production'
  action      String   // e.g., 'create', 'read', 'update', 'delete'
  createdAt   DateTime @default(now())

  roles RolePermission[]

  @@unique([resource, action])
}

model UserRole {
  id     String @id @default(cuid())
  user   User   @relation(fields: [userId], references: [id])
  userId String
  role   Role   @relation(fields: [roleId], references: [id])
  roleId String

  @@unique([userId, roleId])
}

model RolePermission {
  id           String     @id @default(cuid())
  role         Role       @relation(fields: [roleId], references: [id])
  roleId       String
  permission   Permission @relation(fields: [permissionId], references: [id])
  permissionId String

  @@unique([roleId, permissionId])
}

model Session {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@index([userId])
  @@index([token])
}

/// Audit log of user actions
model AuditLog {
  id          String   @id @default(cuid())
  userId      String?
  userEmail   String?
  action      String
  resource    String
  resourceId  String?
  metadata    Json?
  ip          String?
  userAgent   String?
  createdAt   DateTime @default(now())

  @@index([createdAt])
  @@index([userId, createdAt])
  @@index([resource, createdAt])
}
